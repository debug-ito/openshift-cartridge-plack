#!/usr/bin/env perl

use strict;
use warnings;
## use Daemon::Control;
## use IO::Pipe;

exit 0;

my $LIB_DIR = "$ENV{OPENSHIFT_PLACK_DIR}/local";
$ENV{PERL_CPANM_OPT} = "--quiet -l '$LIB_DIR'";

close(STDERR);
open(STDERR, ">&STDOUT");

sub client_out {
    my ($type, $message) = @_;
    my @lines = split(/\n/, $message);
    print "$type: $_\n" foreach @lines;
}

sub client_message {
    my ($message) = @_;
    client_out "CLIENT_MESSAGE", $message;
}

sub run_external {
    my (@commands) = @_;
    my $pipe = IO::Pipe->new;
    my $pid = fork();
    if(!defined($pid)) {
        client_out "CLIENT_ERROR", "Cannot fork()";
        exit 1;
    }elsif(!$pid) {
        $pipe->writer();
        open STDOUT, ">&", $pipe->fileno;
        exec @commands;
    }
    $pipe->reader();
    while(defined(my $line = $pipe->getline)) {
        client_out "CLIENT_ERROR", 
    }
    local $?;
    waitpid $pid, 0;
    return ($? >> 8);
}

sub standard_control {
    Daemon::Control->new({
        name => $ENV{OPENSHIFT_APP_NAME},
        program => "$LIB_DIR/bin/plackup",
        program_args => ["$ENV{OPENSHIFT_REPO_DIR}/app.psgi", "--port", "$ENV{OPENSHIFT_PLACK_PORT}"],
        ## init_config => "path/to/shell_script/to/set/environment",
        pid_file => "$ENV{OPENSHIFT_PLACK_DIR}/run/plackup.pid",
        fork => 2,
    })->run();
}


my $ENV_FILE = "$ENV{OPENSHIFT_REPO_DIR}/env.pl";
if(-f $ENV_FILE) {
    local $@;
    local $!;
    my $ret = do($ENV_FILE);
    if(!defined($ret)) {
        if($@) {
            client_message "Error while compiling env.pl: $@\n";
            exit 1;
        }elsif($!) {
            client_message "Error while reading env.pl: $!\n";
            exit 1;
        }
    }
}

my $action = $ARGV[0];

if(!$action) {
    client_message "action is not specified\n";
    exit 1;
}

my %action_handler_for = (
    (map { $_ => \&standard_control } qw(start stop restart reload status)),
    build => sub {
        client_message "-----> Installing dependency\n";
        chdir "$ENV{OPENSHIFT_REPO_DIR}";
        my $result = run_external("$LIB_DIR/bin/cpanm", "--installdeps", ".");
        if($result != 0) {
            exit $result;
        }
        client_message "-----> Testing\n";
        $result = run_external("prove");
        if($result != 0) {
            exit $result;
        }
        client_message "-----> Done\n";
    },
    tidy => sub {
        client_message "-----> Clean up logs\n";
        run_external("rm -vf '$ENV{OPENSHIFT_PLACK_LOG_DIR}'/*");
        client_message "-----> Done\n";
    },
);

my $handler = $action_handler_for{$action};
if($handler) {
    $handler->();
}else {
    client_message "No handler for $action\n";
}
exit 0;
